CREATE ALGORITHM=UNDEFINED DEFINER=`homestead`@`%` SQL SECURITY DEFINER VIEW `pt_participants_calculated_v` AS select `pds`.`id` AS `id`,`pds`.`round_id` AS `round_id`,`per`.`sample_id` AS `sample_id`,`pds`.`equipment_id` AS `equipment_id`,round(avg(`per`.`cd3_absolute`),0) AS `cd3_absolute_mean`,round(std(`per`.`cd3_absolute`),2) AS `cd3_absolute_sd`,(2 * round(std(`per`.`cd3_absolute`),2)) AS `double_cd3_absolute_sd`,(round(avg(`per`.`cd3_absolute`),0) + (2 * round(std(`per`.`cd3_absolute`),2))) AS `cd3_absolute_upper_limit`,(round(avg(`per`.`cd3_absolute`),2) - (2 * round(std(`per`.`cd3_absolute`),2))) AS `cd3_absolute_lower_limit`,ceiling(((std(`per`.`cd3_absolute`) / avg(`per`.`cd3_absolute`)) * 100)) AS `cd3_absolute_cv`,(case when (ceiling(((std(`per`.`cd3_absolute`) / avg(`per`.`cd3_absolute`)) * 100)) > 28) then 'Failed' else 'Passed' end) AS `cd3_absolute_outcome`,round(avg(`per`.`cd4_absolute`),0) AS `cd4_absolute_mean`,round(std(`per`.`cd4_absolute`),2) AS `cd4_absolute_sd`,(2 * round(std(`per`.`cd4_absolute`),2)) AS `double_cd4_absolute_sd`,(round(avg(`per`.`cd4_absolute`),0) + (2 * round(std(`per`.`cd4_absolute`),2))) AS `cd4_absolute_upper_limit`,(round(avg(`per`.`cd4_absolute`),2) - (2 * round(std(`per`.`cd4_absolute`),2))) AS `cd4_absolute_lower_limit`,ceiling(((std(`per`.`cd4_absolute`) / avg(`per`.`cd4_absolute`)) * 100)) AS `cd4_absolute_cv`,(case when (ceiling(((std(`per`.`cd4_absolute`) / avg(`per`.`cd4_absolute`)) * 100)) > 28) then 'Failed' else 'Passed' end) AS `cd4_absolute_outcome`,round(avg(`per`.`other_absolute`),0) AS `other_absolute_mean`,round(std(`per`.`other_absolute`),2) AS `other_absolute_sd`,(2 * round(std(`per`.`other_absolute`),2)) AS `double_other_absolute_sd`,(round(avg(`per`.`other_absolute`),0) + (2 * round(std(`per`.`other_absolute`),2))) AS `other_absolute_upper_limit`,(round(avg(`per`.`other_absolute`),2) - (2 * round(std(`per`.`other_absolute`),2))) AS `other_absolute_lower_limit`,ceiling(((std(`per`.`other_absolute`) / avg(`per`.`other_absolute`)) * 100)) AS `other_absolute_cv`,(case when (ceiling(((std(`per`.`other_absolute`) / avg(`per`.`other_absolute`)) * 100)) > 28) then 'Failed' else 'Passed' end) AS `other_absolute_outcome`,`pds`.`doc_path` AS `doc_path` from (`pt_data_submission` `pds` join `pt_equipment_results` `per` on((`pds`.`id` = `per`.`equip_result_id`))) group by `per`.`sample_id`,`pds`.`equipment_id`